apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: stonesoup
  namespace: stonesoup-ci
  labels:
    "pipelines.openshift.io/used-by": ""
    "pipelines.openshift.io/runtime": ""
    "pipelines.openshift.io/strategy": ""
spec:
  params:
    - description: 'Source Repository URL'
      name: git-url
      type: string
      default: 'https://github.com/claudiol/spring-petclinic'
    - description: 'Revision of the Source Repository'
      name: revision
      type: string
      default: 'stone-soup-updates'
    - description: 'Fully Qualified Output Image'
      name: output-image
      type: string
      default: 'quay.io/claudiol/stone-soup/spring-petclinic-xgbw:latest'
    - description: The path to your source code
      name: path-context
      type: string
      default: .
    - description: Path to the Dockerfile
      name: dockerfile
      type: string
      default: 'https://raw.githubusercontent.com/devfile-samples/devfile-sample-java-springboot-basic/main/docker/Dockerfile'
      default: Dockerfile
    - description: Force rebuild image
      name: rebuild
      type: string
      default: "false"
    - description: Skip checks against built image
      name: skip-checks
      type: string
      default: "false"
    - description: Execute the build with network isolation
      name: hermetic
      type: string
      default: "false"
    - description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
      default: ""
    - description: Java build
      name: java
      type: string
      default: "true"
    - description: Snyk Token Secret Name
      name: snyk-secret
      type: string
      default: ""
  tasks:
    - name: init
      params:
        - name: image-url
          value: "$(params.output-image)"
        - name: rebuild
          value: "$(params.rebuild)"
        - name: skip-checks
          value: "$(params.skip-checks)"
        - name: pipelinerun-name
          value: "$(context.pipelineRun.name)"
        - name: pipelinerun-uid
          value: "$(context.pipelineRun.uid)"
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-init:0.1@sha256:8c06b307b7f74622503b80ff0b81ffda63129959f52f8ed8f753d8ab98f38411
        name: init
    - name: clone-repository
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: ["true"]
      runAfter:
        - init
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: "$(params.revision)"
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-git-clone:0.1@sha256:458f4853a01c3273bd76076ac1b015d5f901e70fb4b776f788b577adb25bf5f8
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
        - name: basic-auth
          workspace: git-auth
    - name: prefetch-dependencies
      when:
      - input: $(params.hermetic)
        operator: in
        values: ["true"]
      params:
        - name: input
          value: $(params.prefetch-input)
      runAfter:
        - clone-repository
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-prefetch-dependencies:0.1@sha256:609f5c2a0d72dddb193a0fc2aef2390601172d09f093deadfb9827e28e8dea30
        name: prefetch-dependencies
      workspaces:
        - name: source
          workspace: workspace
    - name: build-container
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: ["true"]
      runAfter:
        - prefetch-dependencies
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-buildah:0.1@sha256:f4c4c211a7b8c859fb23d9b01faaf1a995a33b243476a617370e35f6438096e0
        name: buildah
      workspaces:
        - name: source
          workspace: workspace
    - name: inspect-image
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      runAfter:
        - build-container
      taskRef:
        name: inspect-image
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: DOCKER_AUTH
        value: "$(tasks.init.results.container-registry-secret)"
      workspaces:
      - name: source
        workspace: workspace
    - name: label-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      runAfter:
        - inspect-image
      taskRef:
        name: label-check
      workspaces:
      - name: workspace
        workspace: workspace
    - name: optional-label-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      runAfter:
        - inspect-image
      taskRef:
        name: label-check
      params:
      - name: POLICY_NAMESPACE
        value: optional_checks
      workspaces:
      - name: workspace
        workspace: workspace
    - name: deprecated-base-image-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      taskRef:
        name: deprecated-image-check
      params:
      - name: BASE_IMAGES_DIGESTS
        value: $(tasks.build-container.results.BASE_IMAGES_DIGESTS)
      workspaces:
      - name: test-ws
        workspace: workspace
    - name: clair-scan
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      runAfter:
        - build-container
      taskRef:
        name: clair-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: docker-auth
        value: "$(tasks.init.results.container-registry-secret)"
    - name: sast-snyk-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      - input: $(params.snyk-secret)
        operator: notin
        values: [""]
      runAfter:
        - clone-repository
      taskRef:
        name: sast-snyk-check
      params:
        - name: SNYK_SECRET
          value: $(params.snyk-secret)
      workspaces:
      - name: workspace
        workspace: workspace
    - name: clamav-scan
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      runAfter:
        - build-container
      taskRef:
        name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: docker-auth
        value: "$(tasks.init.results.container-registry-secret)"
    - name: sbom-json-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      runAfter:
        - build-container
      taskRef:
        name: sbom-json-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)

  finally:
    - name: show-sbom
      taskRef:
        name: show-sbom
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
    - name: show-summary
      taskRef:
        name: summary
      params:
      - name: pipelinerun-name
        value: "$(context.pipelineRun.name)"
      - name: git-url
        value: "$(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)"
      - name: image-url
        value: $(params.output-image)
      - name: build-task-status
        value: $(tasks.build-container.status)
  results:
    - name: IMAGE_URL
      value: "$(tasks.build-container.results.IMAGE_URL)"
    - name: IMAGE_DIGEST
      value: "$(tasks.build-container.results.IMAGE_DIGEST)"
    - name: CHAINS-GIT_URL
      value: "$(tasks.clone-repository.results.url)"
    - name: CHAINS-GIT_COMMIT
      value: "$(tasks.clone-repository.results.commit)"
  workspaces:
    - name: workspace
    - name: git-auth
      optional: true
