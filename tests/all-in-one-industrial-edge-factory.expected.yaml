---
# Source: all-in-one/templates/rbac/serviceaccount-all-in-one.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: all-in-one-sa
  labels:
    helm.sh/chart: all-in-one-0.1.0
    app.kubernetes.io/name: all-in-one
    app.kubernetes.io/instance: all-in-one
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: all-in-one/templates/cm-configure-all-in-one.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  # quaye abbrev. for Quay Enterprise
  name: configure-all-in-one
  namespace: stackrox
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  configure-all-in-one.sh: |
      echo -n "Checking if quay-enterpise namespace exists ..."
      EXISTS=$(oc get ns quay-enterprise > /dev/null 2>&1; echo $?)
      
      while [ $EXISTS -ne 0 ]; do
        sleep 3
        echo -n "."
        EXISTS=$(oc get ns quay-enterprise > /dev/null 2>&1; echo $?)
      done
      echo "done"
      
      sleep 2
      echo -n "Checking if route for Quay application exists ..."
      EXISTS=$(oc get route quay-registry-quay -n quay-enterprise  > /dev/null 2>&1; echo $?)
      #####   oc get route -n quay-enterprise quay-registry-quay -o json > /dev/null 2>&1; echo $?
      while [ $EXISTS -ne 0 ]; do
        sleep 3
        echo -n "."
        EXISTS=$(oc get route quay-registry-quay -n quay-enterprise > /dev/null 2>&1; echo $?)
      done
      echo "done"
      sleep 2
      
      echo -n "Getting route for Quay application ..."
      #REGISTRY=$(oc get route -n quay-enterprise quay-registry-quay -o json | grep quay-registry-hostname | cut -d ':' -f 2 | tr -d '"' | tr -d ' ')
      REGISTRY=quay-registry-quay-quay-enterprise.apps.region.example.com
      echo "done"
      cat <<EOF > /tmp/registry.json
      spec:
        registrySources:
          insecureRegistries:
          - $REGISTRY
      EOF
      oc patch --patch-file /tmp/registry.json image.config.openshift.io/cluster --type=merge
      sleep 2
      
      echo "Verify you config is updated"
      oc get image.config.openshift.io/cluster -o yaml
      
      echo "Checking to nodes for change"
      
      NODES=$(oc get nodes | grep -v NAME | awk '{print $1}')
      
      for node in $NODES; do
        echo "Checking [$node] for updates. This could take a while."
        UPDATED=$(oc debug -q node/$node -- chroot /host cat /etc/containers/registries.conf | grep location > /dev/null 2>&1;echo $?)
        while [ $UPDATED -ne 0 ]; do
          sleep 2
          UPDATED=$(oc debug -q node/$node -- chroot /host cat /etc/containers/registries.conf | grep location > /dev/null 2>&1;echo $?)
        done
        echo "[$node] has been updated"
      done
      
      # copy quay pull secret into pipeline namespace
      echo -n "Copy quay pull secret into pipeline namespace ... "
      EXISTS=$(oc get secrets | grep quay-pull-secret > /dev/null 2>&1; echo $?)
      if [ $EXISTS -ne 0 ]; then
        oc get secret quay-pull-secret --namespace=devsecops-ci -oyaml | grep -v '\s*namespace:\s' | grep -v '\s*creationTimestamp:\s' | grep -v '\s*resourceVersion:\s' | grep -v '\s*uid:\s' | oc apply --namespace=devsecops-dev -f -
        echo "done"
      else
        echo " already exists"
      fi
      
      
      echo "Updating default service account"
      cat <<EOF > /tmp/default-sa-update.json
      imagePullSecrets:  
      - name: quay-pull-secret
      EOF
      oc patch --patch-file /tmp/default-sa-update.json sa/default -n devsecops-dev --type=merge
      echo "Done updating default service account"
---
# Source: all-in-one/templates/cm-copy-acs-token.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  # quaye abbrev. for Quay Enterprise
  name: copy-acs-token
  namespace: stackrox
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  copy-acs-token.sh: |
       echo "Checking for acs-api-token existence"
       EXISTS=$(oc get secret acs-api-token -n stackrox > /dev/null 2>&1;echo $?)
       while [ $EXISTS -ne 0 ]; do
         sleep 2
         # copy acs-api-token secret into pipeline namespace
         EXISTS=$(oc get secret acs-api-token -n stackrox > /dev/null 2>&1;echo $?)
       done
       EXISTS=$(oc get secret acs-api-token -n devsecops-ci > /dev/null 2>&1;echo $?)
       if [ $EXISTS -ne 0 ]; then
         oc get secret acs-api-token --namespace=stackrox -oyaml | grep -v '\s*namespace:\s' |oc apply --namespace=devsecops-ci -f -
       else
         echo "The acs-api-token secret already exists in namespace devsecops-ci"
       fi
---
# Source: all-in-one/templates/rbac/role-all-in-one.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
  name: all-in-one-role
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: all-in-one/templates/rbac/rolebinding-all-in-one.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: all-in-one-binding
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: all-in-one-role
subjects:
  - kind: ServiceAccount
    name: all-in-one-sa
    namespace: stackrox
  - kind: ServiceAccount
    name: all-in-one-sa
    namespace: devsecops-ci
  - kind: ServiceAccount
    name: all-in-one-sa
    namespace: devsecops-dev
  - kind: ServiceAccount
    name: all-in-one-sa
    namespace: quay-enterprise
---
# Source: all-in-one/templates/job-configure-all-in-one.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "6"
  name: configure-all-in-one
  namespace: stackrox
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          '/tmp/configure-all-in-one.sh'
        name: configure-all-in-one
        volumeMounts:
          - mountPath: /tmp/configure-all-in-one.sh
            name: configure-all-in-one
            subPath: configure-all-in-one.sh
      volumes:
        - name: configure-all-in-one
          configMap:
            name: configure-all-in-one
            defaultMode: 0755
      dnsPolicy: ClusterFirst
      activeDeadlineSeconds: 900
      restartPolicy: Never
      serviceAccountName: all-in-one-sa
      terminationGracePeriodSeconds: 60
---
# Source: all-in-one/templates/job-copy-acs-token.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "6"
  name: hub-devel-copy-acs-token
  namespace: stackrox
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          '/tmp/copy-acs-token.sh'
        name: copy-acs-token
        volumeMounts:
          - mountPath: /tmp/copy-acs-token.sh
            name: copy-acs-token
            subPath: copy-acs-token.sh
      volumes:
        - name: copy-acs-token
          configMap:
            name: copy-acs-token
            defaultMode: 0755
      dnsPolicy: ClusterFirst
      activeDeadlineSeconds: 900
      restartPolicy: Never
      serviceAccountName: all-in-one-sa
      terminationGracePeriodSeconds: 60
